version: 0.2

env:
  variables:
    PROJECT_NAME: "pygoat"
    REPORT_DIR: "security-reports"

phases:
  install:
    commands:
      - echo "Installing dependencies and security tools..."
      - mkdir -p ${REPORT_DIR}
      - ls
      
      # Install pre-commit for validation checks in the pre_build phase
      # - pip install pre-commit

      # Installs pipreqs to update requirements.txt
      - pip install pipreqs

  pre_build:
    commands:
      - echo "Running pre-commit hooks as a validation step in CI..."
      #- pre-commit run --all-files

  build:
    commands:
      - echo "Updating requirements.txt to ensure all dependencies are scanned..."
      # Generates or updates requirements.txt from the source code
      - pipreqs --force 
      
      - echo "Continuing with main security scans if pre-commit passed..."
      
      # --- 1. An치lisis Est치tico (SAST) con Bandit (Docker) ---
      # La imagen ghcr.io/pycqa/bandit/bandit incluye la herramienta y sus dependencias.
      - echo "Ejecutando SAST con Bandit via Docker..."
      - >
          docker run --rm -v "$(pwd)":/src:z ghcr.io/pycqa/bandit/bandit bash -c
          "mkdir -p /src/${REPORT_DIR} && 
          -r /src -f json -o /src/${REPORT_DIR}/bandit-report.json || true
      
      # --- 2. An치lisis de Composici칩n de Software (SCA) con OWASP Dependency-Check (Docker) ---
      - echo "Running SCA with OWASP Dependency-Check via Docker..."
      - docker pull owasp/dependency-check
      - >
          docker run --rm -v "$(pwd)":/src:z owasp/dependency-check bash -c 
          "mkdir -p /src/${REPORT_DIR} && 
           /usr/share/dependency-check/bin/run.sh --scan /src \
           --project '${PROJECT_NAME}' --format JUNIT \
           --out /src/${REPORT_DIR}/dependency-check-report.xml \
           --nvdApiKey ${NIST_API_KEY}"
          
  post_build:
    commands:
      - echo "Uploading security scan results to DefectDojo with curl..."
      
      # Upload Bandit report with curl
      - |
        if [ -f "${REPORT_DIR}/bandit-report.json" ]; then
          curl --location --request POST "$DEFECTDOJO_HOST/api/v2/import-scan/" \
          --header "Authorization: Token $DEFECTDOJO_API_KEY" \
          --form "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
          --form "scan_type=Bandit" \
          --form "active=true" \
          --form "verified=false" \
          --form "tags=cicd-aws-security-pipeline" \
          --form "skip_duplicates=true" \
          --form "title=Bandit SAST Scan - $CODEBUILD_RESOLVED_SOURCE_VERSION" \
          --form "branch=$CODEBUILD_WEBHOOK_HEAD_REF" \
          --form "file=@${REPORT_DIR}/bandit-report.json"
        fi
      
      # Upload OWASP Dependency-Check report with curl
      - |
        if [ -f "${REPORT_DIR}/dependency-check-report.xml" ]; then
          curl --location --request POST "$DEFECTDOJO_HOST/api/v2/import-scan/" \
          --header "Authorization: Token $DEFECTDOJO_API_KEY" \
          --form "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
          --form "scan_type=Dependency Check" \
          --form "active=true" \
          --form "verified=false" \
          --form "tags=cicd-aws-security-pipeline" \
          --form "skip_duplicates=true" \
          --form "title=Dependency Check SCA Scan - $CODEBUILD_RESOLVED_SOURCE_VERSION" \
          --form "branch=$CODEBUILD_WEBHOOK_HEAD_REF" \
          --form "file=@${REPORT_DIR}/dependency-check-report.xml"
        fi

artifacts:
  files:
    - '${REPORT_DIR}/**/*'
  discard-paths: no
