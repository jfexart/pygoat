version: 0.2

env:
  variables:
    PROJECT_NAME: "pygoat"
    REPORT_DIR: "security-reports"

phases:
  install:
    commands:
      - echo "Installing core dependencies..."
      - mkdir -p ${REPORT_DIR}
      - echo "Current directory contents:"
      - ls -la
      
      # Installs pre-commit for validation checks
      #- pip install pre-commit
      
      # Installs pipreqs to update requirements.txt
      - pip install pipreqs

  pre_build:
    commands:
      #- echo "Running pre-commit hooks as a validation step in CI..."
      #- pre-commit run --all-files

  build:
    commands:
      - echo "Updating requirements.txt to ensure all dependencies are scanned..."
      - pipreqs --force . 
      
      - echo "Executing security scans..."
      
      # --- 1. Static Analysis (SAST) with Bandit (Docker) ---
      # Runs Bandit directly in a Docker container, mounting the source code.
      - echo "Running SAST with Bandit via Docker..."
      # Usando una sola linea para evitar errores de sintaxis YAML
      - docker run --rm -v "$(pwd)":/src:z ghcr.io/pycqa/bandit/bandit -r /src -f json -o /src/${REPORT_DIR}/bandit-report.json || true
      
       # --- 2. Software Composition Analysis (SCA) with OWASP Dependency-Check (Docker) ---
      # Runs OWASP Dependency-Check as a root user to solve permission issues.
      - echo "Running SCA with OWASP Dependency-Check via Docker..."
      - docker pull owasp/dependency-check
      - >
          docker run --rm -u root -v "$(pwd)":/src:z owasp/dependency-check 
          --scan /src/requirements.txt 
          --project "${PROJECT_NAME}" 
          --format JUNIT 
          --out /src/${REPORT_DIR}/dependency-check-report.xml 
          --nvdApiKey ${NIST_API_KEY}
          
  post_build:
    commands:
      #- echo "Uploading security scan results to DefectDojo with curl..."
      - echo "Current directory contents:"
      - ls ${REPORT_DIR}
      
      # Sube reporte de Bandit con curl si el archivo existe.
      #- |
      #  if [ -f "${REPORT_DIR}/bandit-report.json" ]; then
      #    curl --location --request POST "$DEFECTDOJO_HOST/api/v2/import-scan/" \
      #    --header "Authorization: Token $DEFECTDOJO_API_KEY" \
      #    --form "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
      #    --form "scan_type=Bandit" \
      #    --form "active=true" \
      #    --form "verified=false" \
      #    --form "tags=cicd-aws-security-pipeline" \
      #    --form "skip_duplicates=true" \
      #    --form "title=Bandit SAST Scan - $CODEBUILD_RESOLVED_SOURCE_VERSION" \
      #    --form "branch=$CODEBUILD_WEBHOOK_HEAD_REF" \
      #    --form "file=@${REPORT_DIR}/bandit-report.json"
      #  fi
      
      # Sube reporte de OWASP Dependency-Check con curl si el archivo existe.
      #- |
      #  if [ -f "${REPORT_DIR}/dependency-check-report.xml" ]; then
      #    curl --location --request POST "$DEFECTDOJO_HOST/api/v2/import-scan/" \
      #    --header "Authorization: Token $DEFECTDOJO_API_KEY" \
      #    --form "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
      #    --form "scan_type=Dependency Check" \
      #    --form "active=true" \
      #    --form "verified=false" \
      #    --form "tags=cicd-aws-security-pipeline" \
      #    --form "skip_duplicates=true" \
      #    --form "title=Dependency Check SCA Scan - $CODEBUILD_RESOLVED_SOURCE_VERSION" \
      #    --form "branch=$CODEBUILD_WEBHOOK_HEAD_REF" \
      #    --form "file=@${REPORT_DIR}/dependency-check-report.xml"
      #  fi

artifacts:
  files:
    - '${REPORT_DIR}/**/*'
  discard-paths: no
